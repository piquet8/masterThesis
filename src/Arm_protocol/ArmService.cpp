/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <ArmService.h>

#include <yarp/os/idl/WireTypes.h>

class ArmService_preGrasp_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_preGrasp_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_preGrasp_helper::ArmService_preGrasp_helper()
{
}

bool ArmService_preGrasp_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("preGrasp", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_preGrasp_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_extractHand_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_extractHand_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper {};
};

ArmService_extractHand_helper::ArmService_extractHand_helper()
{
}

bool ArmService_extractHand_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("extractHand", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_extractHand_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_retractHand_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_retractHand_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_retractHand_helper::ArmService_retractHand_helper()
{
}

bool ArmService_retractHand_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("retractHand", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_retractHand_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_closeHand_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_closeHand_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_closeHand_helper::ArmService_closeHand_helper()
{
}

bool ArmService_closeHand_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("closeHand", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_closeHand_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_openHand_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_openHand_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_openHand_helper::ArmService_openHand_helper()
{
}

bool ArmService_openHand_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("openHand", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_openHand_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_hasGrasped_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_hasGrasped_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_hasGrasped_helper::ArmService_hasGrasped_helper()
{
}

bool ArmService_hasGrasped_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("hasGrasped", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_hasGrasped_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ArmService_home_helper :
        public yarp::os::Portable
{
public:
    explicit ArmService_home_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_return_helper;
};

ArmService_home_helper::ArmService_home_helper()
{
}

bool ArmService_home_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("home", 1, 1)) {
        return false;
    }
    return true;
}

bool ArmService_home_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(m_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
ArmService::ArmService()
{
    yarp().setOwner(*this);
}

bool ArmService::preGrasp()
{
    ArmService_preGrasp_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::preGrasp()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::extractHand()
{
    ArmService_extractHand_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::extractHand()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::retractHand()
{
    ArmService_retractHand_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::retractHand()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::closeHand()
{
    ArmService_closeHand_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::closeHand()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::openHand()
{
    ArmService_openHand_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::openHand()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::hasGrasped()
{
    ArmService_hasGrasped_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::hasGrasped()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

bool ArmService::home()
{
    ArmService_home_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ArmService::home()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : bool{};
}

// help method
std::vector<std::string> ArmService::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("preGrasp");
        helpString.emplace_back("extractHand");
        helpString.emplace_back("retractHand");
        helpString.emplace_back("closeHand");
        helpString.emplace_back("openHand");
        helpString.emplace_back("hasGrasped");
        helpString.emplace_back("home");
        helpString.emplace_back("help");
    } else {
        if (functionName == "preGrasp") {
            helpString.emplace_back("bool preGrasp() ");
        }
        if (functionName == "extractHand") {
            helpString.emplace_back("bool extractHand() ");
        }
        if (functionName == "retractHand") {
            helpString.emplace_back("bool retractHand() ");
        }
        if (functionName == "closeHand") {
            helpString.emplace_back("bool closeHand() ");
        }
        if (functionName == "openHand") {
            helpString.emplace_back("bool openHand() ");
        }
        if (functionName == "hasGrasped") {
            helpString.emplace_back("bool hasGrasped() ");
        }
        if (functionName == "home") {
            helpString.emplace_back("bool home() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ArmService::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "preGrasp") {
            ArmService_preGrasp_helper helper;
            helper.m_return_helper = preGrasp();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "extractHand") {
            ArmService_extractHand_helper helper;
            helper.m_return_helper = extractHand();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "retractHand") {
            ArmService_retractHand_helper helper;
            helper.m_return_helper = retractHand();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "closeHand") {
            ArmService_closeHand_helper helper;
            helper.m_return_helper = closeHand();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "openHand") {
            ArmService_openHand_helper helper;
            helper.m_return_helper = openHand();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "hasGrasped") {
            ArmService_hasGrasped_helper helper;
            helper.m_return_helper = hasGrasped();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "home") {
            ArmService_home_helper helper;
            helper.m_return_helper = home();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(helper.m_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
