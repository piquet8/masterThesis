/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <BatteryReader.h>

#include <yarp/os/idl/WireTypes.h>
#include <yarp/os/LogComponent.h>
#include <yarp/os/LogStream.h>

#include <cstdarg>

namespace {
YARP_LOG_COMPONENT(BATTERYREADER,
                   "scope.Battery_protocol.BatteryReader",
                   yarp::os::Log::minimumPrintLevel(),
                   yarp::os::Log::LogTypeReserved,
                   yarp::os::Log::printCallback(),
                   nullptr)
}

namespace yarp {
namespace os {

struct LogTracer
{
    LogTracer(const char* file,
              const unsigned int line,
              const char* func,
              const double externaltime,
              const yarp::os::LogComponent& comp,
              const char* msg,
              ...) YARP_ATTRIBUTE_FORMAT(printf, 7, 8) :
        m_file(file),
        m_line(line),
        m_func(func),
        m_externaltime(externaltime),
        m_comp(comp)
    {
        m_msg = msg;
        va_start(m_args, msg);
        yarp::os::Log(m_file, m_line, m_func, m_externaltime, nullptr, m_comp).trace(m_msg, m_args);
    }

    ~LogTracer()
    {
        yarp::os::Log(m_file, m_line, m_func, m_externaltime, nullptr, m_comp).trace(m_msg, m_args);
        va_end(m_args);
    }


    const char* m_file;
    const unsigned int m_line;
    const char* m_func;
    const double m_externaltime;
    const yarp::os::LogComponent& m_comp;
    const char* m_msg;
    va_list m_args;
};

} // namespace os
} // namespace yarp

// #  define yTracer(...)               yarp::os::LogTracer(__FILE__, __LINE__, __YFUNCTION__, 0.0, ) trace(__VA_ARGS__)
#  define yCTracer(component, ...)   yarp::os::LogTracer trace(__FILE__, __LINE__, __YFUNCTION__, 0.0, component(), __VA_ARGS__)

class BatteryReader_level_helper :
        public yarp::os::Portable
{
public:
    explicit BatteryReader_level_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_return_helper {};
};

BatteryReader_level_helper::BatteryReader_level_helper()
{
    yCTracer(BATTERYREADER, "[%p]", this);
}

bool BatteryReader_level_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yCTracer(BATTERYREADER, "[%p]", this);

    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("level", 1, 1)) {
        return false;
    }
    return true;
}

bool BatteryReader_level_helper::read(yarp::os::ConnectionReader& connection)
{
    yCTracer(BATTERYREADER, "[%p]", this);

    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        yCTrace(BATTERYREADER) << this << "BatteryReader_level_helper::read() - fail (1)";
        return false;
    }
    if (!reader.readFloat64(m_return_helper)) {
        yCTrace(BATTERYREADER) << this << "BatteryReader_level_helper::read() - fail (2)";
        reader.fail();
        return false;
    }
    yCTrace(BATTERYREADER) << this << "BatteryReader_level_helper::read() -" << m_return_helper;
    return true;
}

class BatteryReader_charging_status_helper :
        public yarp::os::Portable
{
public:
    explicit BatteryReader_charging_status_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    ChargingStatus m_return_helper {};
};

BatteryReader_charging_status_helper::BatteryReader_charging_status_helper()
{
    yCTracer(BATTERYREADER, "[%p]", this);
}

bool BatteryReader_charging_status_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yCTracer(BATTERYREADER, "[%p]", this);

    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("charging_status", 1, 2)) {
        return false;
    }
    return true;
}

bool BatteryReader_charging_status_helper::read(yarp::os::ConnectionReader& connection)
{
    yCTracer(BATTERYREADER, "[%p]", this);

    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        yCTrace(BATTERYREADER) << this << "BatteryReader_charging_status_helper::read() - fail (1)";
        return false;
    }
    int32_t ecast0;
    ChargingStatusVocab cvrt1;
    if (!reader.readEnum(ecast0, cvrt1)) {
        yCTrace(BATTERYREADER) << this << "BatteryReader_charging_status_helper::read() - fail (2)";
        reader.fail();
        return false;
    } else {
        m_return_helper = static_cast<ChargingStatus>(ecast0);
    }
    yCTrace(BATTERYREADER) << this << "BatteryReader_charging_status_helper::read" << ChargingStatusVocab().toString(ecast0);;

    return true;
}

// Constructor
BatteryReader::BatteryReader()
{
    yCTracer(BATTERYREADER, "[%p]", this);
    yarp().setOwner(*this);
}

double BatteryReader::level()
{
    yCTracer(BATTERYREADER, "[%p]", this);
    BatteryReader_level_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double BatteryReader::level()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : double{};
}

ChargingStatus BatteryReader::charging_status()
{
    yCTracer(BATTERYREADER, "[%p]", this);
    BatteryReader_charging_status_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "ChargingStatus BatteryReader::charging_status()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? helper.m_return_helper : ChargingStatus{};
}

// help method
std::vector<std::string> BatteryReader::help(const std::string& functionName)
{
    yCTracer(BATTERYREADER, "[%p]", this);
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("level");
        helpString.emplace_back("charging_status");
        helpString.emplace_back("help");
    } else {
        if (functionName == "level") {
            helpString.emplace_back("double level() ");
        }
        if (functionName == "charging_status") {
            helpString.emplace_back("ChargingStatus charging_status() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool BatteryReader::read(yarp::os::ConnectionReader& connection)
{
    yCTracer(BATTERYREADER, "[%p]", this);
    yDebug("BatteryReader::read() - %d", __LINE__);
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        yDebug("BatteryReader::read() - %d", __LINE__);
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        yDebug("BatteryReader::read() - %d", __LINE__);
        if (tag == "level") {
            yDebug("BatteryReader::read() - %d", __LINE__);
            BatteryReader_level_helper helper;
            helper.m_return_helper = level();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                yDebug("BatteryReader::read() - %d", __LINE__);
                if (!writer.writeListHeader(1)) {
                    yDebug("BatteryReader::read() - %d", __LINE__);
                    return false;
                }
                if (!writer.writeFloat64(helper.m_return_helper)) {
                    yDebug("BatteryReader::read() - %d", __LINE__);
                    return false;
                }
            }
            yDebug("BatteryReader::read() - %d", __LINE__);
            reader.accept();
            yInfo("BatteryReader::read() - %d: [level] %f", __LINE__, helper.m_return_helper);
            return true;
        }
        if (tag == "charging_status") {
            yDebug("BatteryReader::read() - %d", __LINE__);
            BatteryReader_charging_status_helper helper;
            helper.m_return_helper = charging_status();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                yDebug("BatteryReader::read() - %d", __LINE__);
                if (!writer.writeListHeader(1)) {
                    yDebug("BatteryReader::read() - %d", __LINE__);
                    return false;
                }
                if (!writer.writeI32(static_cast<int32_t>(helper.m_return_helper))) {
                    yDebug("BatteryReader::read() - %d", __LINE__);
                    return false;
                }
            }
            yDebug("BatteryReader::read() - %d", __LINE__);
            reader.accept();
            yInfo("BatteryReader::read() - %d: [charging_status] %s", __LINE__, ChargingStatusVocab().toString(helper.m_return_helper).c_str());
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
